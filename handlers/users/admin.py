from asyncio import sleep

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from db.function_db import *
from keyboards.kb_admin import send_admins_from_kb, send_block, send_claims, send_admin_panel, send_wishes
from keyboards.kb_create import *
from loader import bot
from states.registration import *



# –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–ª–±–µ–∫–æ–≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞
@dp.callback_query_handler(Text(startswith='check'))
async def send_admins(callback : types.CallbackQuery, state : FSMContext):

    split = callback.data.split('_')[1]

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, (–±–∞–Ω \ —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if split == 'admins':
        await send_admins_from_kb(callback)
    elif split == 'statistic':
        statistic = await collect_statistic()
        markup = InlineKeyboardMarkup().row(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="check_same"))
        # text = [
        #     f'üë§ –û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {statistic[1]}',
        #     f'üò¥ –ö–æ–ª-–≤–æ —Å–ø—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {statistic[2]}'
        # ]
        await callback.message.edit_text('\n'.join(statistic), reply_markup=markup)
    elif split == 'block':
        await send_block(callback)
        await ForAdmin.begin.set()
        async with state.proxy() as data:
            data['what_do'] = 'block/unblock'
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–± –Ω–∞ –∞–Ω–∫–µ—Ç—ã
    elif split == 'claims':
        check = int(callback.data.split('_')[2])
        await send_claims(callback, check)
    elif split == 'claimbl':
        check = int(callback.data.split('_')[2])
        await delete_block_user('block', callback.data.split('_')[3])
        await callback.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        await send_claims(callback, check)
    elif split == 'delclaim':
        check = int(callback.data.split('_')[2])
        await delete_claims(callback.data.split('_')[3])
        await callback.message.answer('–ñ–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞')
        await send_claims(callback, check)
# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—â–∏—Ö –∂–∞–ª–æ–± –∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π
    elif split == 'wishes':
        check = int(callback.data.split('_')[2])
        await send_wishes(callback, check)
    elif split == 'delwishes':
        print(callback.data)
        check = int(callback.data.split('_')[2])
        await delete_wishes(callback.data.split('_')[3])
        await callback.message.answer('–£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞')
        await send_wishes(callback, check)
    elif split == 'answish':
        print(callback.data)
        await delete_wishes(callback.data.split('_')[4])
        check = int(callback.data.split('_')[2])
        await callback.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        await ForAdmin.begin.set()
        async with state.proxy() as data:
            data['chat_id'] = callback.data.split('_')[3]
            data['what_do'] = 'send_wishes'
# –†–∞–±–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    elif split == 'same':
        await send_admin_panel(callback.message, 'editing')
    elif split == 'stop':
        await callback.message.delete()
        await send_admin_panel(callback.message, 'first')
# –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª—é—á–∏–ª–∏ —Å–≤–æ—é –≤–∏–¥–∏–º–æ—Å—Ç—å –Ω–∞ –º–µ—Å—è—Ü
    elif split == 'activate':
        await callback.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–≤–µ–¥–ª–µ–Ω—ã –∏–∑ —Ç–µ–Ω–∏')
        await activate_users()
        await callback.answer()

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –∫–Ω–æ–ø–∫–µ "–∞–¥–º–∏–Ω—ã"
@dp.callback_query_handler(Text(startswith='admins'))
async def do_some(callback : types.CallbackQuery, state : FSMContext):

    split = callback.data.split('_')[1]

    if split == 'sendmessage':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤')
        await ForAdmin.begin.set()
        await callback.answer()
        async with state.proxy() as data:
            data['what_do'] = 'send_message'
    elif split == 'showpass':
        await callback.message.answer('–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: 7891')
        await callback.answer()
    elif split == 'deleteadmin':
        await callback.message.answer('–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É —É–¥–∞–ª—è–µ–º–æ–≥–æ –∞–¥–º–∏–Ω–∞')
        await ForAdmin.begin.set()
        await callback.answer()
        async with state.proxy() as data:
            data['what_do'] = 'del_admin'
    elif split == 'default':
        await admin_default(callback.message.chat.id)
        await callback.message.answer('–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –¥–µ—Ñ–æ–ª—Ç –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')


@dp.callback_query_handler(Text(startswith='do'), state=ForAdmin.begin)
async def do_some(callback : types.CallbackQuery, state : FSMContext):

    split = callback.data.split('_')[1]

    if split in ('delete','block', 'unblock'):
        async with state.proxy() as data:
            data['some'] = split
        await callback.message.edit_text('–£–∫–∞–∂–∏ –µ–≥–æ chat_id')
    if split == 'same':
        await state.finish()
        await send_admin_panel(callback.message, 'editing')


@dp.message_handler(state=ForAdmin.begin)
async def do_some(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        if data['what_do'] == 'send_wishes':
            text = ['ü§ì –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:',
                       f"'{message.text}'"]
            await bot.send_message(chat_id=data['chat_id'], text='\n'.join(text))
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ /admin')
            await state.finish()
        elif data['what_do'] == 'send_message':
            selected = await select_admin()
            for i in selected:
                text = ['üìå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤:',
                           f'"{message.text}"']
                await bot.send_message(chat_id=i[2], text='\n'.join(text))
                await state.finish()
        elif data['what_do'] == 'del_admin':
            try:
                x = int(message.text)
            except:
                x = False
            selected = await select_admin()
            if x:
                number = 1
                if int(message.text) <= len(selected):
                    for i in selected:
                        our_admin = i[2]
                        if number == x:
                            break
                        number += 1
                    await delete_admin(our_admin)
                    await message.answer('–∞–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω')
                else:
                    await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
            else:
                await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')

        else:
            if len(message.text) == 10:
                await delete_block_user(data['some'], message.text)
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å status : {data["some"]}')

            else:
                await message.answer('–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ chat_id\n/admin')
        await state.finish()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∏–º–Ω–∞
@dp.message_handler(state=BeAdmin.begin)
async def send_search(message: types.Message, state : FSMContext):

    if message.text == '7891':
        if message.from_user.username:
            await make_admin(message.from_user.username, message.chat.id)
        else:
            await make_admin('someadmin', message.chat.id)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω /admin')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞')
    await state.finish()


# –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∫—É–¥–∞ –ª–µ—Ç—è—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (—É–¥–∞–ª–∏—Ç—å????)
@dp.message_handler(state="*", content_types=types.ContentTypes.ANY)
async def bot_echo_all(message: types.Message, state: FSMContext):
    # state = await state.get_state()
    await message.answer(f"–ï—Ä—É–Ω–¥–∞")
    await state.finish()
