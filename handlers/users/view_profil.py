from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from db.function_db import *
from keyboards.kb_profil import *
from keyboards.kb_create import *
from loader import bot
from states.registration import *

# –®–∞–±–ª–æ–Ω—ã
async def shablon_send_new_profil(message):
    a = (await send_profil(message.chat.id))[0]
    markup = InlineKeyboardMarkup()
    but1 = InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', callback_data="profil_all")
    but2 = InlineKeyboardButton('–¥—Ä—É–≥–æ–µ', callback_data="other_bull")
    markup.row(but1).row(but2)
    text = [f'*{a[1]}*, *{a[2]}*, {a[6]}',
            f'*–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–∞ {a[8]} –∏–∑ 10*',
            f'*–ú–æ—è –ø—Ä–æ–±–ª–µ–º–∞*: {a[7]}',
            f'"{a[12]}"']
    await bot.send_photo(message.chat.id, a[9], caption='\n'.join(text), parse_mode=ParseMode.MARKDOWN,
                         reply_markup=markup)


# –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–ª–±–µ–∫–æ–≤ –æ—Ç –ø–∞–Ω–µ–ª–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.callback_query_handler(Text(startswith='profil'))
async def send_full_profil(callback : types.CallbackQuery):
    value = callback.data.split('_')[1]
    if value == 'all':
        async def shablon(callback):
            a = (await send_profil(callback.message.chat.id))[0]
            markup = InlineKeyboardMarkup()
            but1 = InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data="profil_edit")
            but2 = InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data="profil_same")
            markup.row(but1).row(but2)

            text = [f'*–ò–º—è* : {a[1]}',
                    f'*–í–æ–∑—Ä–∞—Å—Ç* : {a[2]}',
                    f'*–•–∞—Ä–∞–∫—Ç–µ—Ä* : {a[6]}',
                    f'*–ü—Ä–æ–±–ª–µ–º–∞* : {a[7]}',
                    f'*–£—Ä–æ–≤–µ–Ω—å –±–æ–ª–∏* : {a[8]}',
                    f'*–û —Å–µ–±–µ* : "{a[12]}"',
                    f'\n*–ü—É–Ω–∫—Ç—ã –Ω–∏–∂–µ –Ω–µ –≤–∏–¥–Ω—ã –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º*',
                    f'*–°—Ç—Ä–∞–Ω–∞* : {a[3]}',
                    f'*–ì–æ—Ä–æ–¥* : {a[4]}',
                    f'*–ü–æ–ª* : {a[5]}',
                ]
            await callback.message.edit_caption(caption='\n'.join(text), reply_markup=markup, parse_mode=ParseMode.MARKDOWN)
        await shablon(callback)
        await callback.answer()
    elif value == 'edit':
        a = await send_panel_profil_for_edit()
        await callback.message.edit_reply_markup(reply_markup=a)
        await callback.answer()
    elif value == 'same':
        a = (await send_profil(callback.message.chat.id))[0]
        markup = InlineKeyboardMarkup()
        but1 = InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', callback_data="profil_all")
        but2 = InlineKeyboardButton('–¥—Ä—É–≥–æ–µ', callback_data="other_")
        markup.row(but1).row(but2)

        text = [f'*{a[1]}*, *{a[2]}*, {a[6]}',
                f'*–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–∞ {a[8]} –∏–∑ 10*',
                f'*–ú–æ—è –ø—Ä–æ–±–ª–µ–º–∞*: {a[7]}',
                f'"{a[12]}"']

        await callback.message.edit_caption(caption='\n'.join(text), parse_mode=ParseMode.MARKDOWN, reply_markup=markup)
        await callback.answer()


@dp.callback_query_handler(Text(startswith='edit'), state=None)
async def editing_profil(callback : types.CallbackQuery, state : FSMContext):
    value = callback.data.split('_')[1]
    await EditingProfil.begin.set()
    await callback.message.delete()
    async with state.proxy() as data:
        data['value'] = value

    if value in ('name', 'age', 'country', 'city', 'indy'):
        dict = {'name': '–∏–º—è', 'age': '–≤–æ–∑—Ä–∞—Å—Ç', 'city': '–≥–æ—Ä–æ–¥', 'country': '—Å—Ç—Ä–∞–Ω—É', 'indy': '–æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–±—è'}
        await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–∏ –Ω–æ–≤–æ–µ {dict[value]} –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è')
    elif value in ('gender', 'personality', 'pain', 'disease'):
        await globals()[f'send_{value}_for_edit'](callback)
    elif value == 'photo':
        await callback.message.answer('–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É —Å–∞–º—É—é –∫–ª–∞—Å—Å–Ω—É—é —Ñ–æ—Ç–∫—É üî•üî•üî•')
        async with state.proxy() as data:
            data['check_for_photo'] = 0

# –∫–æ–ª–±–µ–∫ –µ—Å–ª–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–æ–ª–µ–∑–Ω–∏ —é–∑–µ—Ä –Ω–∞–∂–º–µ—Ç "–Ω–∞–∑–∞–¥"
@dp.callback_query_handler(Text(startswith='edit_disease'), state=EditingProfil.begin)
async def editing_profil(callback : types.CallbackQuery, state : FSMContext):
    value = callback.data.split('_')[1]
    await callback.message.delete()
    await globals()[f'send_{value}_for_edit'](callback)


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è messahe_handler
@dp.message_handler(state=EditingProfil.begin)
async def save(message : types.Message, state : FSMContext):

    async with state.proxy() as data:
        value = data['value']

        if value == 'age':
            if message.text.isdigit():
                if int(message.text) in range(0, 99):
                    await update_profil(data['value'], message.text, message.chat.id)
                    await message.answer('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω)))')
                    await shablon_send_new_profil(message)
                    await state.finish()
                else:
                    await message.answer('–í–í–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
            else:
                await message.answer('–í–í–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
        elif value in ('name', 'country', 'city', 'indy'):
            await update_profil(data['value'], message.text, message.chat.id)
            await message.answer('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω)))')
            await shablon_send_new_profil(message)
            await state.finish()


@dp.message_handler(content_types=['photo'], state=EditingProfil.begin)
async def save(message : types.Message, state : FSMContext):

    async with state.proxy() as data:
        value = data['value']

    if value == 'photo':
        async with state.proxy() as data:
            data['check_for_photo'] = data['check_for_photo'] + 1
        if data['check_for_photo'] == 1:
            await update_profil(value, message.photo[-1].file_id, message.chat.id)
            await message.answer('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω)))')
            await shablon_send_new_profil(message)
            await state.finish()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ (callback-–∏)
@dp.callback_query_handler(Text(startswith='redact'), state=EditingProfil.begin)
async def save_for_callback(callback : types.CallbackQuery, state : FSMContext):

    async with state.proxy() as data:
        await update_profil(data['value'], callback.data.split('_')[1], callback.message.chat.id)
        await callback.message.delete()
        await callback.message.answer('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω)))')
        await shablon_send_new_profil(callback.message)
        await state.finish()


# –†–∞–∑–≤–ª–µ—Ç–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –±–æ–ª–µ–∑–Ω–∏
@dp.callback_query_handler(Text(startswith='change'), state=EditingProfil.begin)
async def edit_disease_choise_1(callback : types.CallbackQuery, state : FSMContext):

    value = callback.data.split('_')[1]

    if value == 'edit':
        await send_disease_for_redact(callback, value)
    elif value == 'add':
        await send_disease_for_redact(callback, value)
    elif value == 'physical':
        await send_disease_some_for_redact(callback, 'p')
    elif value == 'crazy':
        await send_disease_some_for_redact(callback, 'c')
    else:
        await send_disease_for_redact(callback)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –±–æ–ª–µ–∑–Ω–∏
@dp.callback_query_handler(Text(startswith='SR'), state=EditingProfil.begin)
async def edit_disease_choise_1(callback : types.CallbackQuery, state : FSMContext):
    async with state.proxy() as data:

        if callback.data.split('_')[1] == '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å':
            await send_disease_some_for_redact(callback, 'a')
        elif callback.data.split('_')[2] == 'edit':
            await update_profil(data['value'], callback.data.split('_')[1], callback.message.chat.id)
            await callback.message.delete()
            await callback.message.answer('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω)))')
            await shablon_send_new_profil(callback.message)
            await state.finish()
        elif callback.data.split('_')[2] == 'add':
            await update_profil_add(data['value'], callback.data.split('_')[1], callback.message.chat.id)
            await callback.message.delete()
            await callback.message.answer('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω)))')
            await shablon_send_new_profil(callback.message)
            await state.finish()


# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ "–¥—Ä—É–≥–æ–µ"
@dp.callback_query_handler(Text(startswith='other'))
async def save_for_callback(callback : types.CallbackQuery, state : FSMContext):

    a = callback.data.split('_')[1]

    if a == 'review':
        await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏–∏ –≤–∞—à–µ –¥–µ–ª–æ. "–î–ª—è –¥–µ–ª–∞" (—Å) –ò–≥–æ—Ä—å –ö–∞–π–Ω–∞—Ä–∞')
        await ProfilOther.begin.set()
    elif a == 'stop':
        await callback.message.delete()
        await stop_searching(False, callback.message.chat.id)
        await callback.message.answer('–¶–µ–Ω–∏–º —Ç–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–±—ã—Ç—å –æ–¥–Ω–æ–º—É/–æ–π üòå —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º –≤ —Ç–µ—á–µ–Ω–∏–∏ '
                                      '30 –¥–Ω–µ–π, —á—Ç–æ–±—ã –≤–Ω–æ–≤—å —Å—Ç–∞—Ç—å –≤–∏–¥–∏–º—ã–º –Ω–∞–∂–º–∏ üëâüèº /lets_search')
    else:
        await send_other_for_profil(callback)


@dp.message_handler(state=ProfilOther.begin)
async def send_review(message : types.Message, state : FSMContext):

    await insert_wishes(message.text, message.chat.id)
    await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, –∑–∞ –ø–æ–º–æ—â—å, –º—ã —É—á—Ç–µ–º —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ')
    await state.finish()
