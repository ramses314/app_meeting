from asyncio import sleep

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from db.function_db import *
from keyboards.kb_create import *
from keyboards.kb_search import send_next_search
from loader import bot
from states.registration import *



# –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–ª–±–µ–∫–æ–≤ –æ—Ç –ø–∞–Ω–µ–ª–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è
# (–∫–∞–∫-—Ç–æ –≥—Ä–æ–º–æ–∑–¥–∫–æ, –ø–æ–∑–∂–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
@dp.callback_query_handler(Text(startswith='search'))
async def send_search(callback : types.CallbackQuery):
    split = callback.data.split('_')[1]
    own_profil = (await send_profil(callback.message.chat.id))

    if own_profil[0][15] != 1:
        if split == 'go':
            selected = (await send_search_db(callback.message.chat.id, own_profil[0][7].split(',\n'), own_profil[0][13]))
            await send_next_search(callback, selected)
        elif split == 'heart':
            selected = (await send_search_db(callback.message.chat.id, own_profil[0][7].split(',\n'), own_profil[0][13]))
            chat_id = callback.data.split('_')[2]

            text = [f'*{own_profil[0][1]}*, *{own_profil[0][2]}*, {own_profil[0][6]}',
                    f'*–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–∞ {10 - int(own_profil[0][8])} –∏–∑ 10*',
                    f'*–ú–æ—è –ø—Ä–æ–±–ª–µ–º–∞*: {own_profil[0][7]}',
                    f'"{own_profil[0][12]}"',
                    f"\n–¢—ã –º–æ–∂–µ—à—å [üëâüèº –Ω–∞–ø–∏—Å–∞—Ç—å üëàüèº](tg://user?id={callback.message.chat.id})"
                        ]
            try:
                await bot.send_photo(chat_id=chat_id, photo=own_profil[0][9], caption='\n'.join(text),
                                 parse_mode=ParseMode.MARKDOWN)
                await bot.send_message(chat_id=chat_id, text=f"üëÜüèº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—è–≤–∏–ª –∫ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å\n/stop_search -- —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤")
            except:
                pass
            await callback.message.answer('–°–∏–º–ø–∞—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ù§Ô∏è')
            await sleep(0.7)
            await send_next_search(callback, selected)

        else:
            # await callback.message.delete()
            await callback.message.answer('–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ)))\n/search\n/profil')
    else:
        if split == 'heart':
            chat_id = callback.data.split('_')[2]
            text = [f'*{own_profil[0][1]}*, *{own_profil[0][2]}*, {own_profil[0][6]}',
                    f'*–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–∞ {10 - int(own_profil[0][8])} –∏–∑ 10*',
                    f'*–ú–æ—è –ø—Ä–æ–±–ª–µ–º–∞*: {own_profil[0][7]}',
                    f'"{own_profil[0][12]}"',
                    f"\n–¢—ã –º–æ–∂–µ—à—å [üëâüèº –Ω–∞–ø–∏—Å–∞—Ç—å üëàüèº](tg://user?id={callback.message.chat.id})"
                    ]
            try:
                await bot.send_photo(chat_id=chat_id, photo=own_profil[0][9], caption='\n'.join(text),
                                 parse_mode=ParseMode.MARKDOWN)
                await bot.send_message(chat_id=chat_id, text=f"üëÜüèº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—è–≤–∏–ª –∫ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å\n/stop_search -- —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤")
            except:
                pass
            await callback.message.answer('–°–∏–º–ø–∞—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ù§Ô∏è')
            await reset_search(callback.message.chat.id)
            # await callback.message.delete()
            # await callback.message.answer('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ª—é–¥–∏ —Å —Å—Ö–æ–∂–∏–º–∏ —Å –≤–∞—à–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å /search')

        await callback.message.delete()
        await reset_search(callback.message.chat.id)
        await callback.message.answer('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ª—é–¥–∏ —Å —Å—Ö–æ–∂–∏–º–∏ —Å –≤–∞—à–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å /search')


@dp.callback_query_handler(Text(startswith='claim'))
async def rise_claim(callback : types.CallbackQuery, state : FSMContext):

    own_profil = (await send_profil(callback.message.chat.id))
    if own_profil[0][15] == 1:
        await reset_search(callback.message.chat.id)

    await callback.message.delete()
    await Claim.begin.set()
    async with state.proxy() as data:
        data['quilty'] = callback.data.split('_')[1]
    await callback.message.answer('–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏ –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞, –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å')


# —Ö—ç–Ω–¥–æ–µ—Ä (–∞–¥–º–∏–Ω–∫–∞)
@dp.message_handler(state=Claim.begin)
async def claim_complite(message : types.Message, state : FSMContext):

    async with state.proxy() as data:
        await insert_claims(message.text, data['quilty'], message.chat.id)

    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å, –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ —ç—Ç–æ –º–µ—Å—Ç–æ –±—É–¥–µ—Ç —á–∏—â–µ –∏ –¥–æ–±—Ä–µ–µ)))'
                         '\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ /search')
    await state.finish()

