from aiogram import types
from aiogram.dispatcher.filters import CommandStart, CommandHelp
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton

from db.create_db import *
from keyboards.kb_admin import send_admin_panel
from keyboards.kb_search import *
from loader import dp, bot
from states.registration import Registration


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥—É—à–∞ ü§ó –Ω–µ –≤—Å–µ–≥–¥–∞ –±—ã–≤–∞–µ—Ç –ª–µ–≥–∫–æ, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂—É —É –ª—é–¥–µ–π "
                         f"—Å —Ç–æ–π –∂–µ –ø—Ä–æ–±–ª–µ–º–æ–π, —á—Ç–æ –∏ —É —Ç–µ–±—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∂–º–∏ üëâüèº /create "
                       )


@dp.message_handler(CommandHelp())
async def bot_help(message: types.Message):
    text = ("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ",
            "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥",
            "/create - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            "/search - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫",
            "/profil - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
            "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É",
            )
    await message.answer("\n".join(text))



# –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(commands='create', state=None)
async def ask_name(message : types.Message):
    await Registration.name.set()
    await message.answer('–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å —Ç–≤–æ–µ –∏–º—è?')

    # if len(await verify_user(message.chat.id)):
    #     await message.answer('–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n–°–≤–æ–∏ –ø–∞—Ä–µ–º–µ—Ç—Ä—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ /profil')
    # else:
    #     await Registration.name.set()
    #     await message.answer('–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å —Ç–≤–æ–µ –∏–º—è?')
    #



# –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(commands='profil', state=None)
async def show_profil(message : types.Message):
    a = (await send_profil(message.chat.id))[0]
    markup = InlineKeyboardMarkup()
    but1 = InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', callback_data="profil_all")
    but2 = InlineKeyboardButton('–¥—Ä—É–≥–æ–µ', callback_data="other_bull")
    markup.row(but1).row(but2)

    text = [f'*{a[1]}* - {a[2]} –≥–æ–¥–∞',
            f'*—Ö–∞—Ä–∞–∫—Ç–µ—Ä*: {a[6]}',
            f'*–ú–æ—è –ø—Ä–æ–±–ª–µ–º–∞*: {a[7]}',
            f'"{a[12]}"']
    await bot.send_photo(message.chat.id, a[9], caption='\n'.join(text) ,parse_mode=ParseMode.MARKDOWN,
                         reply_markup=markup)


# –Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
@dp.message_handler(commands='search', state=None)
async def send_search(message : types.Message):
    a = (await send_profil(message.chat.id))
    selected = (await send_search_db(message.chat.id, a[0][7].split(',\n'), a[0][13]))
    await send_first_search(message, selected)


# –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞ (+–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è)
@dp.message_handler(commands='admin', state=None)
async def send_search(message : types.Message):

    if len(await verify_admin(message.chat.id)):
        await send_admin_panel(message)
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º')


# –û—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(state=None)
async def bot_echo(message: types.Message):
    await message.answer("üîé –ü–æ–∏—Å–∫ /search\n"
                         "üë§ –ø—Ä–æ—Ñ–∏–ª—å /profil")



# # –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∫—É–¥–∞ –ª–µ—Ç—è—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
# @dp.message_handler(state="*", content_types=types.ContentTypes.ANY)
# async def bot_echo_all(message: types.Message, state: FSMContext):
#     state = await state.get_state()
#     await message.answer(f"–≠—Ö–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ <code>{state}</code>.\n"
#                          f"\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
#                          f"<code>{message}</code>")