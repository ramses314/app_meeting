from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, KeyboardButton, ReplyKeyboardMarkup

from db.function_db import send_db_sick, select_admin, check_claims, check_wishes, send_search_db, send_profil
from loader import bot


async def send_admin_panel(message : types.Message, some):
    markup = InlineKeyboardMarkup()
    but1 = InlineKeyboardButton('–ê–¥–º–∏–Ω—ã', callback_data="check_admins")
    but2 = InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data="check_statistic")
    but3 = InlineKeyboardButton('block/del –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data="check_block")
    but4 = InlineKeyboardButton('–ñ–∞–ª–æ–±—ã –Ω–∞ –∞–Ω–∫–µ—Ç—ã', callback_data="check_claims_0")
    but5 = InlineKeyboardButton('–û–±—â–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è-–∂–∞–ª–æ–±—ã ', callback_data="check_wishes_0")
    but6 = InlineKeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å '—Å–ø—è—â–∏—Ö'", callback_data="check_activate")

    markup.row(but1, but2).row(but3, but4).row(but5, but6)
    if some == 'editing':
        await message.edit_text('–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è', reply_markup=markup)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è', reply_markup=markup)


async def send_admins_from_kb(callback : types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    but1 = InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º', callback_data="admins_sendmessage")
    but2 = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data="admins_deleteadmin")
    but3 = InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞', callback_data="admins_showpass")
    but4 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="check_same")
    markup.row(but1, but2).row(but3).row(but4)

    selected = await select_admin()
    text = ['–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:',]
    number = 1
    for i in selected:
        text.append(f'{number}. {i[1]}, chat_id : {i[2]};')
        number += 1
    await callback.message.edit_text('\n'.join(text), reply_markup=markup)
    await callback.answer()


async def send_block(callback : types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    but1 = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data="do_delete")
    but2 = InlineKeyboardButton('–ó–∞–±–ª–æ—á–∏—Ç—å', callback_data="do_block")
    but3 = InlineKeyboardButton('–†–∞–∑–±–ª–æ—á–∏—Ç—å', callback_data="do_unblock")
    but4 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="do_same")
    markup.row(but1, but2, but3).row(but4)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)


async  def send_claims(callback : types.CallbackQuery,  check):
    claims = await check_claims(check)
    print(3434, claims)
    markup = InlineKeyboardMarkup()
    but1 = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—É', callback_data=f"check_delclaim_{check}_{claims[2]}")
    but2 = InlineKeyboardButton('–ó–∞–±–ª–æ—á–∏—Ç—å', callback_data=f"check_claimbl_{check + 1}_{claims[2]}")
    but3 = InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f"check_claims_{check + 1}")
    but4 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="check_stop")
    markup.row(but1, but2, but3).row(but4)
    await callback.message.delete()
    if claims == 'pop':
        await callback.message.answer('–°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–± –ø—É—Å—Ç /admin')
    else:
        a = (await send_profil(claims[2]))[0]
        text = [f'*–ü—Ä–æ—Ñ–∏–ª—å –∏–∑ –ñ–ê–õ–û–ë–´:üîª\n**{a[1]}*, *{a[2]}*, {a[6]}',
                f'*–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–∞ {a[8]} –∏–∑ 10*',
                f'*–ú–æ—è –ø—Ä–æ–±–ª–µ–º–∞*: {a[7]}',
                f'"{a[12]}"',
                f'\n–ñ–∞–ª–æ–±–∞ : {claims[1]}\n–û—Å—Ç–∞–≤–∏–ª –∂–∞–ª–æ–±—É : {claims[3]}']

        await bot.send_photo(callback.message.chat.id, a[9], caption='\n'.join(text), parse_mode=ParseMode.MARKDOWN,
                             reply_markup=markup)
        await callback.answer()


async def send_wishes(callback : types.CallbackQuery, check):

    wishes = await check_wishes(check)
    markup = InlineKeyboardMarkup()
    but1 = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f"check_delwishes_{check}_{wishes[0]}")
    but2 = InlineKeyboardButton('–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f"check_answish_{check + 1}_{wishes[2]}_{wishes[0]}")
    but3 = InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f"check_wishes_{check + 1}")
    but4 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="check_same")
    markup.row(but1, but2, but3).row(but4)

    if wishes == 'empty':
        await callback.message.edit_text('–°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±-–ø–æ–∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç /admin')
    else:
        await callback.message.edit_text(f"–°–æ–æ–±—â–Ω–∏–µ : '{wishes[1]}'\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è : {wishes[2]}", reply_markup=markup)
        await callback.answer()
